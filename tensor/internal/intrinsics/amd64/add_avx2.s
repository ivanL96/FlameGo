//go:build !noasm && amd64
// AUTO-GENERATED BY GOAT -- DO NOT EDIT

TEXT Â·_mm256_add_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55               // pushq	%rbp
	WORD $0x8948; BYTE $0xe5 // movq	%rsp, %rbp
	BYTE $0x53               // pushq	%rbx
	LONG $0xf8e48348         // andq	$-8, %rsp
	LONG $0x07418d4c         // leaq	7(%rcx), %r8
	WORD $0x8548; BYTE $0xc9 // testq	%rcx, %rcx
	LONG $0xc1490f4c         // cmovnsq	%rcx, %r8
	WORD $0x894c; BYTE $0xc0 // movq	%r8, %rax
	LONG $0x03f8c148         // sarq	$3, %rax
	LONG $0xf8e08349         // andq	$-8, %r8
	WORD $0x294c; BYTE $0xc1 // subq	%r8, %rcx
	WORD $0xc085             // testl	%eax, %eax
	JLE  LBB0_6
	LONG $0xff488d44         // leal	-1(%rax), %r9d
	WORD $0x8941; BYTE $0xc0 // movl	%eax, %r8d
	LONG $0x03e08341         // andl	$3, %r8d
	LONG $0x03f98341         // cmpl	$3, %r9d
	JB   LBB0_4
	WORD $0xe083; BYTE $0xfc // andl	$-4, %eax

LBB0_3:
	LONG $0x0710fcc5             // vmovups	(%rdi), %ymm0
	LONG $0x0658fcc5             // vaddps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x4710fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm0
	LONG $0x4658fcc5; BYTE $0x20 // vaddps	32(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdx)
	LONG $0x4710fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm0
	LONG $0x4658fcc5; BYTE $0x40 // vaddps	64(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x40 // vmovups	%ymm0, 64(%rdx)
	LONG $0x4710fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm0
	LONG $0x4658fcc5; BYTE $0x60 // vaddps	96(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x60 // vmovups	%ymm0, 96(%rdx)
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	LONG $0x80ea8348             // subq	$-128, %rdx
	WORD $0xc083; BYTE $0xfc     // addl	$-4, %eax
	JNE  LBB0_3

LBB0_4:
	WORD $0x8545; BYTE $0xc0 // testl	%r8d, %r8d
	JE   LBB0_6

LBB0_5:
	LONG $0x0710fcc5 // vmovups	(%rdi), %ymm0
	LONG $0x0658fcc5 // vaddps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5 // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	LONG $0x20c28348 // addq	$32, %rdx
	LONG $0xffc08341 // addl	$-1, %r8d
	JNE  LBB0_5

LBB0_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB0_18
	WORD $0x8941; BYTE $0xc8 // movl	%ecx, %r8d
	LONG $0x20f88349         // cmpq	$32, %r8
	JAE  LBB0_9
	WORD $0xc031             // xorl	%eax, %eax
	JMP  LBB0_14

LBB0_9:
	LONG $0x82048d4a         // leaq	(%rdx,%r8,4), %rax
	LONG $0x870c8d4e         // leaq	(%rdi,%r8,4), %r9
	LONG $0x86148d4e         // leaq	(%rsi,%r8,4), %r10
	WORD $0x394c; BYTE $0xca // cmpq	%r9, %rdx
	LONG $0xc3920f41         // setb	%r11b
	WORD $0x3948; BYTE $0xc7 // cmpq	%rax, %rdi
	WORD $0x920f; BYTE $0xc3 // setb	%bl
	WORD $0x394c; BYTE $0xd2 // cmpq	%r10, %rdx
	LONG $0xc1920f41         // setb	%r9b
	WORD $0x3948; BYTE $0xc6 // cmpq	%rax, %rsi
	LONG $0xc2920f41         // setb	%r10b
	WORD $0xc031             // xorl	%eax, %eax
	WORD $0x8441; BYTE $0xdb // testb	%bl, %r11b
	JNE  LBB0_14
	WORD $0x2045; BYTE $0xd1 // andb	%r10b, %r9b
	JNE  LBB0_14
	WORD $0x8941; BYTE $0xc9 // movl	%ecx, %r9d
	LONG $0x1fe18341         // andl	$31, %r9d
	WORD $0x894c; BYTE $0xc0 // movq	%r8, %rax
	WORD $0x294c; BYTE $0xc8 // subq	%r9, %rax
	WORD $0x3145; BYTE $0xd2 // xorl	%r10d, %r10d

LBB0_12:
	LONG $0x107ca1c4; WORD $0x9704             // vmovups	(%rdi,%r10,4), %ymm0
	LONG $0x107ca1c4; WORD $0x974c; BYTE $0x20 // vmovups	32(%rdi,%r10,4), %ymm1
	LONG $0x107ca1c4; WORD $0x9754; BYTE $0x40 // vmovups	64(%rdi,%r10,4), %ymm2
	LONG $0x107ca1c4; WORD $0x975c; BYTE $0x60 // vmovups	96(%rdi,%r10,4), %ymm3
	LONG $0x587ca1c4; WORD $0x9604             // vaddps	(%rsi,%r10,4), %ymm0, %ymm0
	LONG $0x5874a1c4; WORD $0x964c; BYTE $0x20 // vaddps	32(%rsi,%r10,4), %ymm1, %ymm1
	LONG $0x586ca1c4; WORD $0x9654; BYTE $0x40 // vaddps	64(%rsi,%r10,4), %ymm2, %ymm2
	LONG $0x5864a1c4; WORD $0x965c; BYTE $0x60 // vaddps	96(%rsi,%r10,4), %ymm3, %ymm3
	LONG $0x117ca1c4; WORD $0x9204             // vmovups	%ymm0, (%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x924c; BYTE $0x20 // vmovups	%ymm1, 32(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x40 // vmovups	%ymm2, 64(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x60 // vmovups	%ymm3, 96(%rdx,%r10,4)
	LONG $0x20c28349                           // addq	$32, %r10
	WORD $0x394c; BYTE $0xd0                   // cmpq	%r10, %rax
	JNE  LBB0_12
	WORD $0x854d; BYTE $0xc9                   // testq	%r9, %r9
	JE   LBB0_18

LBB0_14:
	WORD $0xc129             // subl	%eax, %ecx
	WORD $0x8949; BYTE $0xc1 // movq	%rax, %r9
	WORD $0xf749; BYTE $0xd1 // notq	%r9
	WORD $0x014d; BYTE $0xc1 // addq	%r8, %r9
	LONG $0x03e18348         // andq	$3, %rcx
	JE   LBB0_16

LBB0_15:
	LONG $0x0410fac5; BYTE $0x87 // vmovss	(%rdi,%rax,4), %xmm0
	LONG $0x0458fac5; BYTE $0x86 // vaddss	(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x82 // vmovss	%xmm0, (%rdx,%rax,4)
	LONG $0x01c08348             // addq	$1, %rax
	LONG $0xffc18348             // addq	$-1, %rcx
	JNE  LBB0_15

LBB0_16:
	LONG $0x03f98349 // cmpq	$3, %r9
	JB   LBB0_18

LBB0_17:
	LONG $0x0410fac5; BYTE $0x87   // vmovss	(%rdi,%rax,4), %xmm0
	LONG $0x0458fac5; BYTE $0x86   // vaddss	(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x82   // vmovss	%xmm0, (%rdx,%rax,4)
	LONG $0x4410fac5; WORD $0x0487 // vmovss	4(%rdi,%rax,4), %xmm0
	LONG $0x4458fac5; WORD $0x0486 // vaddss	4(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0482 // vmovss	%xmm0, 4(%rdx,%rax,4)
	LONG $0x4410fac5; WORD $0x0887 // vmovss	8(%rdi,%rax,4), %xmm0
	LONG $0x4458fac5; WORD $0x0886 // vaddss	8(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0882 // vmovss	%xmm0, 8(%rdx,%rax,4)
	LONG $0x4410fac5; WORD $0x0c87 // vmovss	12(%rdi,%rax,4), %xmm0
	LONG $0x4458fac5; WORD $0x0c86 // vaddss	12(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c82 // vmovss	%xmm0, 12(%rdx,%rax,4)
	LONG $0x04c08348               // addq	$4, %rax
	WORD $0x3949; BYTE $0xc0       // cmpq	%rax, %r8
	JNE  LBB0_17

LBB0_18:
	LONG $0xf8658d48         // leaq	-8(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
