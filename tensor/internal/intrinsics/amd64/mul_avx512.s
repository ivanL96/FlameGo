//go:build !noasm && amd64
// AUTO-GENERATED BY GOAT -- DO NOT EDIT

TEXT Â·_mm512_mul_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55               // pushq	%rbp
	WORD $0x8948; BYTE $0xe5 // movq	%rsp, %rbp
	BYTE $0x53               // pushq	%rbx
	LONG $0xf8e48348         // andq	$-8, %rsp
	LONG $0x0f418d4c         // leaq	15(%rcx), %r8
	WORD $0x8548; BYTE $0xc9 // testq	%rcx, %rcx
	LONG $0xc1490f4c         // cmovnsq	%rcx, %r8
	WORD $0x894c; BYTE $0xc0 // movq	%r8, %rax
	LONG $0x04f8c148         // sarq	$4, %rax
	LONG $0xf0e08349         // andq	$-16, %r8
	WORD $0x294c; BYTE $0xc1 // subq	%r8, %rcx
	WORD $0xc085             // testl	%eax, %eax
	JLE  LBB0_6
	LONG $0xff488d44         // leal	-1(%rax), %r9d
	WORD $0x8941; BYTE $0xc0 // movl	%eax, %r8d
	LONG $0x03e08341         // andl	$3, %r8d
	LONG $0x03f98341         // cmpl	$3, %r9d
	JB   LBB0_4
	WORD $0xe083; BYTE $0xfc // andl	$-4, %eax

LBB0_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0659             // vmulps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211             // vmovups	%zmm0, (%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups	64(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x01 // vmulps	64(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x01 // vmovups	%zmm0, 64(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x02 // vmovups	128(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x02 // vmulps	128(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x02 // vmovups	%zmm0, 128(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x03 // vmovups	192(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x03 // vmulps	192(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x03 // vmovups	%zmm0, 192(%rdx)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // addq	$256, %rsi
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdx
	WORD $0xc083; BYTE $0xfc                   // addl	$-4, %eax
	JNE  LBB0_3

LBB0_4:
	WORD $0x8545; BYTE $0xc0 // testl	%r8d, %r8d
	JE   LBB0_6

LBB0_5:
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0659 // vmulps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211 // vmovups	%zmm0, (%rdx)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c68348               // addq	$64, %rsi
	LONG $0x40c28348               // addq	$64, %rdx
	LONG $0xffc08341               // addl	$-1, %r8d
	JNE  LBB0_5

LBB0_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB0_24
	WORD $0x8941; BYTE $0xc8 // movl	%ecx, %r8d
	LONG $0x08f88349         // cmpq	$8, %r8
	JAE  LBB0_9
	WORD $0xc031             // xorl	%eax, %eax

LBB0_20:
	WORD $0xc129             // subl	%eax, %ecx
	WORD $0x8949; BYTE $0xc1 // movq	%rax, %r9
	WORD $0xf749; BYTE $0xd1 // notq	%r9
	WORD $0x014d; BYTE $0xc1 // addq	%r8, %r9
	LONG $0x03e18348         // andq	$3, %rcx
	JE   LBB0_22

LBB0_21:
	LONG $0x0410fac5; BYTE $0x87 // vmovss	(%rdi,%rax,4), %xmm0
	LONG $0x0459fac5; BYTE $0x86 // vmulss	(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x82 // vmovss	%xmm0, (%rdx,%rax,4)
	LONG $0x01c08348             // addq	$1, %rax
	LONG $0xffc18348             // addq	$-1, %rcx
	JNE  LBB0_21

LBB0_22:
	LONG $0x03f98349 // cmpq	$3, %r9
	JB   LBB0_24

LBB0_23:
	LONG $0x0410fac5; BYTE $0x87   // vmovss	(%rdi,%rax,4), %xmm0
	LONG $0x0459fac5; BYTE $0x86   // vmulss	(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x82   // vmovss	%xmm0, (%rdx,%rax,4)
	LONG $0x4410fac5; WORD $0x0487 // vmovss	4(%rdi,%rax,4), %xmm0
	LONG $0x4459fac5; WORD $0x0486 // vmulss	4(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0482 // vmovss	%xmm0, 4(%rdx,%rax,4)
	LONG $0x4410fac5; WORD $0x0887 // vmovss	8(%rdi,%rax,4), %xmm0
	LONG $0x4459fac5; WORD $0x0886 // vmulss	8(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0882 // vmovss	%xmm0, 8(%rdx,%rax,4)
	LONG $0x4410fac5; WORD $0x0c87 // vmovss	12(%rdi,%rax,4), %xmm0
	LONG $0x4459fac5; WORD $0x0c86 // vmulss	12(%rsi,%rax,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c82 // vmovss	%xmm0, 12(%rdx,%rax,4)
	LONG $0x04c08348               // addq	$4, %rax
	WORD $0x3949; BYTE $0xc0       // cmpq	%rax, %r8
	JNE  LBB0_23

LBB0_24:
	LONG $0xf8658d48         // leaq	-8(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB0_9:
	LONG $0x82048d4a         // leaq	(%rdx,%r8,4), %rax
	LONG $0x870c8d4e         // leaq	(%rdi,%r8,4), %r9
	LONG $0x86148d4e         // leaq	(%rsi,%r8,4), %r10
	WORD $0x394c; BYTE $0xca // cmpq	%r9, %rdx
	LONG $0xc3920f41         // setb	%r11b
	WORD $0x3948; BYTE $0xc7 // cmpq	%rax, %rdi
	WORD $0x920f; BYTE $0xc3 // setb	%bl
	WORD $0x394c; BYTE $0xd2 // cmpq	%r10, %rdx
	LONG $0xc1920f41         // setb	%r9b
	WORD $0x3948; BYTE $0xc6 // cmpq	%rax, %rsi
	LONG $0xc2920f41         // setb	%r10b
	WORD $0xc031             // xorl	%eax, %eax
	WORD $0x8441; BYTE $0xdb // testb	%bl, %r11b
	JNE  LBB0_20
	WORD $0x2045; BYTE $0xd1 // andb	%r10b, %r9b
	JNE  LBB0_20
	LONG $0x40f88341         // cmpl	$64, %r8d
	JAE  LBB0_13
	WORD $0xc031             // xorl	%eax, %eax
	JMP  LBB0_17

LBB0_13:
	WORD $0x8941; BYTE $0xc9 // movl	%ecx, %r9d
	LONG $0x3fe18341         // andl	$63, %r9d
	WORD $0x894c; BYTE $0xc0 // movq	%r8, %rax
	WORD $0x294c; BYTE $0xc8 // subq	%r9, %rax
	WORD $0x3145; BYTE $0xd2 // xorl	%r10d, %r10d

LBB0_14:
	LONG $0x487cb162; WORD $0x0410; BYTE $0x97 // vmovups	(%rdi,%r10,4), %zmm0
	QUAD $0x01974c10487cb162                   // vmovups	64(%rdi,%r10,4), %zmm1
	QUAD $0x02975410487cb162                   // vmovups	128(%rdi,%r10,4), %zmm2
	QUAD $0x03975c10487cb162                   // vmovups	192(%rdi,%r10,4), %zmm3
	LONG $0x487cb162; WORD $0x0459; BYTE $0x96 // vmulps	(%rsi,%r10,4), %zmm0, %zmm0
	QUAD $0x01964c594874b162                   // vmulps	64(%rsi,%r10,4), %zmm1, %zmm1
	QUAD $0x02965459486cb162                   // vmulps	128(%rsi,%r10,4), %zmm2, %zmm2
	QUAD $0x03965c594864b162                   // vmulps	192(%rsi,%r10,4), %zmm3, %zmm3
	LONG $0x487cb162; WORD $0x0411; BYTE $0x92 // vmovups	%zmm0, (%rdx,%r10,4)
	QUAD $0x01924c11487cb162                   // vmovups	%zmm1, 64(%rdx,%r10,4)
	QUAD $0x02925411487cb162                   // vmovups	%zmm2, 128(%rdx,%r10,4)
	QUAD $0x03925c11487cb162                   // vmovups	%zmm3, 192(%rdx,%r10,4)
	LONG $0x40c28349                           // addq	$64, %r10
	WORD $0x394c; BYTE $0xd0                   // cmpq	%r10, %rax
	JNE  LBB0_14
	WORD $0x854d; BYTE $0xc9                   // testq	%r9, %r9
	JE   LBB0_24
	LONG $0x08f98341                           // cmpl	$8, %r9d
	JB   LBB0_20

LBB0_17:
	WORD $0x8949; BYTE $0xc1 // movq	%rax, %r9
	WORD $0x8941; BYTE $0xca // movl	%ecx, %r10d
	LONG $0x07e28341         // andl	$7, %r10d
	WORD $0x894c; BYTE $0xc0 // movq	%r8, %rax
	WORD $0x294c; BYTE $0xd0 // subq	%r10, %rax

LBB0_18:
	LONG $0x107ca1c4; WORD $0x8f04 // vmovups	(%rdi,%r9,4), %ymm0
	LONG $0x597ca1c4; WORD $0x8e04 // vmulps	(%rsi,%r9,4), %ymm0, %ymm0
	LONG $0x117ca1c4; WORD $0x8a04 // vmovups	%ymm0, (%rdx,%r9,4)
	LONG $0x08c18349               // addq	$8, %r9
	WORD $0x394c; BYTE $0xc8       // cmpq	%r9, %rax
	JNE  LBB0_18
	WORD $0x854d; BYTE $0xd2       // testq	%r10, %r10
	JNE  LBB0_20
	JMP  LBB0_24
